println("Branch name: ${BRANCH_NAME}")

switch(BRANCH_NAME) {
  case "test_deploy":
    aws_region="us-east-1"
    region="info"
    cloud_front_distribution_id="E3OQ4LKWZZXBRX"
    site_url="https://oforms.teamlab.info"
    break
  case "production_deploy":
    aws_region=""
    region="com"
    cloud_front_distribution_id=""
    site_url=""
    break
  default:
    println("Branch: ${BRANCH_NAME} do not for deploy.")
    break
}

pipeline {
  agent { label 'ubuntu' }
  triggers {
    githubPush()
  }
  options {
    disableConcurrentBuilds()
    buildDiscarder (logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  stages {
    stage('deploy') {
      when { 
        anyOf { branch 'test_deploy'; 
                branch '1111111production_deploy' }
      }
      environment {
        region = "${region}"
      }
      steps {
        sh '''
          tar -czpf .jenkins/oforms.tar.gz \
            --exclude ".git" \
            --exclude ".gitignore" \
            --exclude ".jenkins" \
            --exclude "README.md" .
          
          echo "Deploy from ${BRANCH_NAME} is starting."
        '''
        
        sshPublisher(publishers: [sshPublisherDesc(configName: "strapi_oforms@${region}", 
          transfers: [sshTransfer(cleanRemote: false, 
            excludes: '', 
            execCommand: '''
              sudo bash /home/ubuntu/deploy/.jenkins/build.sh |& tee -a > /home/ubuntu/deploy/deploy.log
            ''', 
            execTimeout: 600000, 
            flatten: false, 
            makeEmptyDirs: false, 
            noDefaultExcludes: false, 
            patternSeparator: '[, ]+', 
            remoteDirectory: '', 
            remoteDirectorySDF: false, 
            removePrefix: '', 
            sourceFiles: '.jenkins/oforms.tar.gz,.jenkins/build.sh')], 
          usePromotionTimestamp: false, 
          useWorkspaceInPromotion: false, 
          verbose: false)])
      }
    }
    stage('invalidation') {
      when { 
        anyOf { branch 'test_deploy'; 
                branch '111111production_deploy' }
      }
      environment {
        aws_region = "${aws_region}"
        cloud_front_distribution_id = "${cloud_front_distribution_id}"
      }
      steps {
        withCredentials([
                usernamePassword(credentialsId: 'aws_build_robot', 
                passwordVariable: 'secret_key', 
                usernameVariable: 'access_key')]) {
          sh '''
            export AWS_ACCESS_KEY_ID="$access_key"
            export AWS_SECRET_ACCESS_KEY="$secret_key"
            export AWS_DEFAULT_aws_region="$aws_region"
            
            echo "=== start invalidation ==="
            aws cloudfront create-invalidation \
              --distribution-id ${cloud_front_distribution_id} \
              --paths "/*"
          '''
        }
      }
    }
  }
}