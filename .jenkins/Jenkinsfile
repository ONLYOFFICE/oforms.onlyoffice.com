println("Branch name: ${BRANCH_NAME}")

switch(BRANCH_NAME) {
  case "test_deploy":
    aws_region="us-east-1"
    region="info"
    cloud_front_distribution_id="E3OQ4LKWZZXBRX"
    site_url="https://oforms.teamlab.info"
    docEditorUrl="https://doc-linux.teamlab.info"
    cms="https://oforms.teamlab.info/dashboard"
    appServer="https://oforms.teamlab.info/"
    domains="static-oforms.teamlab.info"

    break
  case "production_deploy":
    aws_region="us-west-2"
    region="com"
    MONITOR_ID = '58439000014815195'
    cloud_front_distribution_id="E18Y5OI4JS5NAJ"
    site_url="https://oforms.onlyoffice.com"
    docEditorUrl="https://asc.docs.onlyoffice.com"
    cms="https://oforms.onlyoffice.com/dashboard"
    appServer="https://oforms.onlyoffice.com/"
    domains="static-oforms.onlyoffice.com"

    break
  default:
    println("Branch: ${BRANCH_NAME} do not for deploy.")
    break
}

pipeline {
  agent { label 'ubuntu' }
  triggers {
    githubPush()
  }
  options {
    disableConcurrentBuilds()
    buildDiscarder (logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  stages {
    stage('stop_monitor') {
      when { branch 'production_deploy' }
      steps {
        build job: 'monitor.24x7.start.stop', 
          parameters: [string(name: 'monitor_id', value: "${MONITOR_ID}"), 
          string(name: 'action', value: 'suspend')]
      }    
    }
    
    stage('deploy') {
      when { 
        anyOf { branch 'test_deploy'; 
                branch 'production_deploy' }
      }
      environment {
        aws_region = "${aws_region}"
        region = "${region}"
        docEditorUrl="${docEditorUrl}"
        cms="${cms}"
        appServer="${appServer}"
        domains="${domains}"
      }
      steps { 
        withCredentials([usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS',
                passwordVariable: 'NEXT_PUBLIC_FILES_DOCSERVICE_SECRET',
                usernameVariable: 'NEXT_PUBLIC_EDITOR_API_URL'),
                usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS_TEST',
                passwordVariable: 'NEXT_PUBLIC_FILES_DOCSERVICE_SECRET_TEST',
                usernameVariable: 'NEXT_PUBLIC_EDITOR_API_URL_TEST'),
                usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS_AWS',
                passwordVariable: 'NEXT_PUBLIC_SECRET_ACCESS_KEY',
                usernameVariable: 'NEXT_PUBLIC_ACCESS_KEY_ID'),
                usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS_BUCKET_REGION',
                passwordVariable: 'NEXT_PUBLIC_BUCKET',
                usernameVariable: 'NEXT_PUBLIC_REGION'),
                string(credentialsId: 'NEXT_PUBLIC_RECAPTCHA_CREDS_SITE_KEY', 
                variable: 'NEXT_PUBLIC_RECAPTCHA_SITE_KEY'),
                string(credentialsId: 'NEXT_PUBLIC_RECAPTCHA_CREDS_SITE_KEY_TEST', 
                variable: 'NEXT_PUBLIC_RECAPTCHA_SITE_KEY_TEST')]) {

          sh '''
            if [[ ${BRANCH_NAME} == "test_deploy" ]]; then
              NEXT_PUBLIC_EDITOR_API_URL=$NEXT_PUBLIC_EDITOR_API_URL_TEST
              NEXT_PUBLIC_FILES_DOCSERVICE_SECRET=$NEXT_PUBLIC_FILES_DOCSERVICE_SECRET_TEST
              NEXT_PUBLIC_RECAPTCHA_SITE_KEY=$NEXT_PUBLIC_RECAPTCHA_SITE_KEY_TEST
            fi

            sed -i "s^config_docEditorUrl^$docEditorUrl^" config/config.json
            sed -i "s^config_cms^$cms^" config/config.json
            sed -i "s^config_appServer^$appServer^" config/config.json
            sed -i "s^nextconfig_domains^$domains^" next.config.js

            sed -i "s^var_next_public_editor_api_url^$NEXT_PUBLIC_EDITOR_API_URL^" .env.local
            sed -i "s^var_next_public_files_docservice_secret^$NEXT_PUBLIC_FILES_DOCSERVICE_SECRET^" .env.local

            sed -i "s^var_next_public_region^$aws_region^" .env.local
            sed -i "s^var_next_public_bucket^$domains^" .env.local
            sed -i "s^var_next_public_access_key_id^$NEXT_PUBLIC_ACCESS_KEY_ID^" .env.local
            sed -i "s^var_next_public_secret_access_key^$NEXT_PUBLIC_SECRET_ACCESS_KEY^" .env.local

            sed -i "s^var_next_public_recaptcha_site_key^$NEXT_PUBLIC_RECAPTCHA_SITE_KEY^" .env.local
              
            tar -czpf .jenkins/oforms.tar.gz \
              --exclude ".git" \
              --exclude ".gitignore" \
              --exclude ".jenkins" \
              --exclude "README.md" .
            
            echo "Deploy from ${BRANCH_NAME} is starting."
          '''
        }
        
        sshPublisher(publishers: [sshPublisherDesc(configName: "strapi_oforms@${region}", 
          transfers: [sshTransfer(cleanRemote: false, 
            excludes: '', 
            execCommand: '''
              sudo bash /home/ubuntu/deploy/.jenkins/build.sh |& tee -a > /home/ubuntu/deploy/www-cms-marketplace_deploy.log
            ''', 
            execTimeout: 600000, 
            flatten: false, 
            makeEmptyDirs: false, 
            noDefaultExcludes: false, 
            patternSeparator: '[, ]+', 
            remoteDirectory: '', 
            remoteDirectorySDF: false, 
            removePrefix: '', 
            sourceFiles: '.jenkins/oforms.tar.gz,.jenkins/build.sh')], 
          usePromotionTimestamp: false, 
          useWorkspaceInPromotion: false, 
          verbose: false)])
      }
    }
    stage('invalidation') {
      when { 
        anyOf { branch 'test_deploy'; 
                branch 'production_deploy' }
      }
      environment {
        aws_region = "${aws_region}"
        cloud_front_distribution_id = "${cloud_front_distribution_id}"
      }
      steps {
        withCredentials([
                usernamePassword(credentialsId: 'aws_build_robot', 
                passwordVariable: 'secret_key', 
                usernameVariable: 'access_key')]) {
          sh '''
            export AWS_ACCESS_KEY_ID="$access_key"
            export AWS_SECRET_ACCESS_KEY="$secret_key"
            export AWS_DEFAULT_aws_region="$aws_region"
            
            echo "=== start invalidation ==="
            aws cloudfront create-invalidation --distribution-id ${cloud_front_distribution_id} --paths "/*" || \
            aws cloudfront create-invalidation --distribution-id ${cloud_front_distribution_id} --paths "/*"
          '''
        }
      }
    }
    
    stage('start_monitor') {
      when { branch 'production_deploy' }
      steps {
        build job: 'monitor.24x7.start.stop', 
          parameters: [string(name: 'monitor_id', value: "${MONITOR_ID}"), 
          string(name: 'action', value: 'activate')]
      }    
    }
  }
}
