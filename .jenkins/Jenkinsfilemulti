pipeline {
  agent { label 'ubuntu' }
  parameters {
    gitParameter (name: 'BRANCH_NAME',
     type: 'PT_BRANCH',
     branchFilter:'*',
     listSize:'5',
     defaultValue:'test_deploy',
     selectedValue:'DEFAULT',
     sortMode: 'ASCENDING_SMART',
     description: 'Select branch name to build')
    choice(name: 'EXECUTE', choices: ['True','False'],description: 'Choice "True" to run it or "False" to update job')
  }
  triggers {
    githubPush()
  }
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  stages {
    stage('Set Variables') {
      steps {
        script {
          env.BRANCH_NAME = params.BRANCH_NAME
          println("Branch name: ${env.BRANCH_NAME}")

          if (env.BRANCH_NAME == "production_deploy") {
            // Production parameters
            env.aws_region = "us-west-2"
            env.region = "com"
            env.MONITOR_ID = '58439000014815195'
            env.cloud_front_distribution_id = "E18Y5OI4JS5NAJ"
            env.site_url = "https://oforms.onlyoffice.com"
            env.cms = "https://oforms.onlyoffice.com/dashboard"
            env.appServer = "https://oforms.onlyoffice.com/"
            env.domains = "static-oforms.onlyoffice.com"
            env.email_port = "587"
          } else {
            // Test parameters for all other branches
            println("Branch: ${env.BRANCH_NAME} will be deployed to test.")
            env.aws_region = "us-east-1"
            env.region = "info"
            env.cloud_front_distribution_id = "E3OQ4LKWZZXBRX"
            env.site_url = "https://oforms.teamlab.info"
            env.cms = "https://oforms.teamlab.info/dashboard"
            env.appServer = "https://oforms.teamlab.info/"
            env.domains = "static-oforms.teamlab.info"
            env.email_port = "587"
          }
        }
      }
    }

    stage('stop_monitor') {
      when { expression { env.BRANCH_NAME == 'production_deploy' } }
      steps {
        build job: 'monitor.24x7.start.stop', 
          parameters: [
            string(name: 'monitor_id', value: "${env.MONITOR_ID}"), 
            string(name: 'action', value: 'suspend')
          ]
      }    
    }

    stage('deploy') {
      when { expression { return env.EXECUTE == "True" } }
      steps { 
        withCredentials([
          usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS',
            passwordVariable: 'NEXT_PUBLIC_FILES_DOCSERVICE_SECRET',
            usernameVariable: 'NEXT_PUBLIC_EDITOR_API_URL'),
          usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS_TEST',
            passwordVariable: 'NEXT_PUBLIC_FILES_DOCSERVICE_SECRET_TEST',
            usernameVariable: 'NEXT_PUBLIC_EDITOR_API_URL_TEST'),
          usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS_AWS',
            passwordVariable: 'NEXT_PUBLIC_SECRET_ACCESS_KEY',
            usernameVariable: 'NEXT_PUBLIC_ACCESS_KEY_ID'),
          usernamePassword(credentialsId: 'NEXT_PUBLIC_EDITOR_CREDS_BUCKET_REGION',
            passwordVariable: 'NEXT_PUBLIC_BUCKET',
            usernameVariable: 'NEXT_PUBLIC_REGION'),
          string(credentialsId: 'NEXT_PUBLIC_RECAPTCHA_CREDS_SITE_KEY', 
            variable: 'NEXT_PUBLIC_RECAPTCHA_SITE_KEY'),
          string(credentialsId: 'NEXT_PUBLIC_RECAPTCHA_CREDS_SITE_KEY_TEST', 
            variable: 'NEXT_PUBLIC_RECAPTCHA_SITE_KEY_TEST'),
          string(credentialsId: 'NEXT_PUBLIC_STRAPI_API_TOKEN', 
            variable: 'NEXT_PUBLIC_STRAPI_API_TOKEN'),
          string(credentialsId: 'NEXT_PUBLIC_STRAPI_API_TOKEN_TEST', 
            variable: 'NEXT_PUBLIC_STRAPI_API_TOKEN_TEST'),
          string(credentialsId: 'oforms_email_server', variable: 'NEXT_PUBLIC_EMAIL_HOST'), 
          string(credentialsId: 'oforms_email_accoiunt_1', variable: 'NEXT_PUBLIC_EMAIL_ACCOUNT_1'), 
          string(credentialsId: 'oforms_email_account_2', variable: 'NEXT_PUBLIC_EMAIL_ACCOUNT_2'), 
          usernamePassword(credentialsId: 'oforms_email_user', 
            passwordVariable: 'NEXT_PUBLIC_EMAIL_AUTH_PASSWORD', 
            usernameVariable: 'NEXT_PUBLIC_EMAIL_AUTH_USER')
        ]) {

          sh '''
            if [[ "$BRANCH_NAME" == "production_deploy" ]]; then
              # Use production credentials (already set)
              :
            else
              # Override with test credentials
              NEXT_PUBLIC_EDITOR_API_URL=$NEXT_PUBLIC_EDITOR_API_URL_TEST
              NEXT_PUBLIC_FILES_DOCSERVICE_SECRET=$NEXT_PUBLIC_FILES_DOCSERVICE_SECRET_TEST
              NEXT_PUBLIC_RECAPTCHA_SITE_KEY=$NEXT_PUBLIC_RECAPTCHA_SITE_KEY_TEST
              NEXT_PUBLIC_STRAPI_API_TOKEN=$NEXT_PUBLIC_STRAPI_API_TOKEN_TEST
            fi

            sed -i "s^config_docEditorUrl^$NEXT_PUBLIC_EDITOR_API_URL^" config/config.json
            sed -i "s^config_cms^${cms}^" config/config.json
            sed -i "s^config_appServer^${appServer}^" config/config.json
            sed -i "s^nextconfig_domains^${domains}^" next.config.js

            sed -i "s^var_next_public_editor_api_url^$NEXT_PUBLIC_EDITOR_API_URL^" .env.local
            sed -i "s^var_next_public_files_docservice_secret^$NEXT_PUBLIC_FILES_DOCSERVICE_SECRET^" .env.local
            sed -i "s^var_next_public_recaptcha_site_key^$NEXT_PUBLIC_RECAPTCHA_SITE_KEY^" .env.local
            sed -i "s^var_next_public_strapi_api_token^$NEXT_PUBLIC_STRAPI_API_TOKEN^" .env.local

            sed -i "s^var_next_public_region^${aws_region}^" .env.local
            sed -i "s^var_next_public_bucket^${domains}^" .env.local
            sed -i "s^var_next_public_access_key_id^$NEXT_PUBLIC_ACCESS_KEY_ID^" .env.local
            sed -i "s^var_next_public_secret_access_key^$NEXT_PUBLIC_SECRET_ACCESS_KEY^" .env.local

            sed -i "s^var_next_public_email_host^$NEXT_PUBLIC_EMAIL_HOST^" .env.local
            sed -i "s^var_next_public_email_port^${email_port}^" .env.local
            sed -i "s^var_next_public_email_auth_user^$NEXT_PUBLIC_EMAIL_AUTH_USER^" .env.local
            sed -i "s^var_next_public_email_auth_password^$NEXT_PUBLIC_EMAIL_AUTH_PASSWORD^" .env.local
            sed -i "s^var_next_public_email_account_1^$NEXT_PUBLIC_EMAIL_ACCOUNT_1^" .env.local
            sed -i "s^var_next_public_email_account_2^$NEXT_PUBLIC_EMAIL_ACCOUNT_2^" .env.local  
            
            tar -czpf .jenkins/oforms.tar.gz \
              --exclude ".git" \
              --exclude ".gitignore" \
              --exclude ".jenkins" \
              --exclude "README.md" .
            
            echo "Deploy from ${BRANCH_NAME} is starting."
          '''
        }
        
        sshPublisher(publishers: [sshPublisherDesc(configName: "strapi_oforms@${region}", 
          transfers: [sshTransfer(cleanRemote: false, 
            excludes: '', 
            execCommand: '''
              sudo bash /home/ubuntu/deploy/.jenkins/build.sh |& tee -a /home/ubuntu/deploy/oforms_deploy.log
            ''', 
            execTimeout: 600000, 
            flatten: false, 
            makeEmptyDirs: false, 
            noDefaultExcludes: false, 
            patternSeparator: '[, ]+', 
            remoteDirectory: '', 
            remoteDirectorySDF: false, 
            removePrefix: '', 
            sourceFiles: '.jenkins/oforms.tar.gz,.jenkins/build.sh')], 
          usePromotionTimestamp: false, 
          useWorkspaceInPromotion: false, 
          verbose: false)])
      }
    }

    stage('invalidation') {
      when { expression { return env.EXECUTE == "True" } }
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'aws_build_robot', 
            passwordVariable: 'SECRET_KEY', 
            usernameVariable: 'ACCESS_KEY')
        ]) {
          sh '''
            export AWS_ACCESS_KEY_ID="$ACCESS_KEY"
            export AWS_SECRET_ACCESS_KEY="$SECRET_KEY"
            export AWS_DEFAULT_REGION="${aws_region}"
            
            echo "=== start invalidation ==="
            aws cloudfront create-invalidation --distribution-id ${cloud_front_distribution_id} --paths "/*" || \
            aws cloudfront create-invalidation --distribution-id ${cloud_front_distribution_id} --paths "/*"
          '''
        }
      }
    }

    stage('start_monitor') {
      when { expression { env.BRANCH_NAME == 'production_deploy' } }
      steps {
        build job: 'monitor.24x7.start.stop', 
          parameters: [
            string(name: 'monitor_id', value: "${env.MONITOR_ID}"), 
            string(name: 'action', value: 'activate')
          ]
      }    
    }
  }
}
